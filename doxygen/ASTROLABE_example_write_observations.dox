/** \page wobs Writing observation data using the generic reader classes

\section wobs-example About the example

The following is an example showing how to write through a "data channel" that will store ASTROLABE observations.

A few comments on the example:

- This example works in tandem with the observations reader test example (see \ref rwobs). That is, the files written or data sent through sockets by this writer must be read by the tandem reader.
- The main function in the example writes data to whatever channel (text or binary files, TCP / IP sockets).
- Function "set_synthetic_lineage_data" creates a fake lineage object with dummy data. It is necessary to write the ASTROLABE header file describing the output data.
- Note that the class RecordStructure and its methods is a mechanism devised to simulate a way to obtain easily the structural information describing an observation, as the number of tags it includes or the dimension of the observation vector. Therefore, an although it is necessary to run the example, it is not part of the example itself. Both the header and implementation (.hpp, .cpp) files are reproduced at the bottom of this page.
- Note too that the same version of class RecordStructure must be used in both this example and its counterpart (see again \ref rwobs). Otherwise, the description of data will not match and the example will crash.
- Furthermore, this example simulates a fake sequence of several types of observation records (either o- or l- ones) corresponding to different kinds of observations and observation equations. Although such sequence is generated synthetically (that is, it is invented by the software) it adheres to the limitations stated for obs-event files (as the fact that new epochs must start with l-records). To generate such a sequence of l- and o-records, class RecordSequence is used. Again, this class is not part of the example itself but it is necessary to make it run. Both the header and implementation files for such class are included at the end of this page.

\section wobs-dependencies Dependencies

The observation generic writer example depends on the following libraries:

- astrolabe

When using Microsoft compilers, the following library must also be added to the previous list:

- Ws2_32.lib

\section wobs-code The full example

\code
#include <string>

#include "RecordStructure.hpp"
#include "RecordSequence.hpp"

#include "observation_writer.hpp"

using namespace std;

void
set_synthetic_lineage_data
(lineage_data& lineage)
{
  {
    string svalue;

    // Set the identifier.

    svalue = "ID0";
    lineage.id_set(svalue);

    // Set the name

    svalue = "Sample observation-events file";
    lineage.name_set(svalue);

    // Set the author

    svalue = "Event writer tester program";
    lineage.author_item_add(svalue);

    // Set the organization

    svalue = "The name of the organization goes here";
    lineage.organization_set(svalue);

    // Set the department.

    svalue = "The name of the department goes here";
    lineage.department_set(svalue);

    // Set the project

    svalue = "The name of the project goes here";
    lineage.project_set(svalue);

    // Set the task

    svalue = "The name of the task goes here";
    lineage.task_set(svalue);

    // Set the reference documents

    svalue = "As many entries as desired may be added to refer to related documentation";
    lineage.ref_document_item_add(svalue);

    // Set the remarks

    svalue = "Any interesting remarks go here";
    lineage.remarks_set(svalue);

  }
}

int
main
(int argv, char** argc)
{
  {
    //
    // Data obtained from the user, which will be used to
    // select and configure our data channel.
    //

    int     device_format;
    string  external_base_name;
    string  host;
    string  outfile_name;
    int     port;
    int     server_mode;

    //
    // Data arrays for l-records. Related
    // dimensions.
    //

    double* the_tags;
    double* the_expectations;
    double* the_covariance_values;

    int     the_tags_size;
    int     the_expectations_size;
    int     the_covariance_values_size;

    int     n_tags;
    int     n_expectations;
    int     n_covariance_values;

    //
    // Data arrays for o-records. Related
    // dimensions.
    //

    int*    the_par_iids;
    int*    the_obs_iids;
    int*    the_ins_iids;

    int     the_par_size;
    int     the_obs_size;
    int     the_ins_size;

    int     n_par_iids;
    int     n_obs_iids;
    int     n_ins_iids;

    // Metadata to generate fake l- and o- records.

    string  sid;
    char*   identifier;
    int     identifier_width;
    double  time_tag;
    int     record_type;
    int     record_id_index;
    int     cycle;

    // The ASTROLABE generic events writer.

    observation_writer writer;

    // Synthetic (nonsensical) lineage to add to the ASTROLABE header file.

    lineage_data file_lineage;

    //
    // The auxiliary classes that will generate record
    // sequence hints and will describe the structure
    // or these records.
    //

    RecordSequence  the_record_sequence;
    RecordStructure record_structure_catalogue;

    // Other auxiliary variables, as error codes or loop indices.

    int     i;
    int     line_index;
    int     random_value;
    int     io_status;
    int     total_lines;

    // --------------------------------------------------------------

    // PRELIMINARY WORK.

    //
    // We will dimension the different variable length data
    // arrays according to the maximum dimension needed. To
    // do so, we'll ask the RecordStructure object about
    // the properties of all the fake records it contain.
    //

    identifier_width           = 0;
    the_tags_size              = 1;
    the_expectations_size      = 1;
    the_covariance_values_size = 1;

    for (i = 0; i < record_structure_catalogue.n_l_record_types(); i++)
    {
      record_structure_catalogue.l_record_data(i, sid, n_tags, n_expectations);

      if (n_tags            > the_tags_size         ) the_tags_size = n_tags;
      if (n_expectations    > the_expectations_size ) the_expectations_size = n_expectations;
      if ((int)sid.length() > identifier_width      ) identifier_width = (int)sid.length();
    }

    the_covariance_values_size = (the_expectations_size * (the_expectations_size + 1)) / 2;

    the_tags              = new double[the_tags_size];
    the_expectations      = new double[the_expectations_size];
    the_covariance_values = new double[the_covariance_values_size];


    the_par_size = 1;
    the_obs_size = 1;
    the_ins_size = 1;

    for (i = 0; i < record_structure_catalogue.n_o_record_types(); i++)
    {
      record_structure_catalogue.o_record_data(i, sid, n_par_iids, n_obs_iids, n_ins_iids);

      if (n_par_iids        > the_par_size     ) the_par_size = n_par_iids;
      if (n_obs_iids        > the_obs_size     ) the_obs_size = n_obs_iids;
      if (n_ins_iids        > the_ins_size     ) the_ins_size = n_ins_iids;
      if ((int)sid.length() > identifier_width ) identifier_width = (int)sid.length();
    }

    the_par_iids = new int[the_par_size];
    the_obs_iids = new int[the_obs_size];
    the_ins_iids = new int[the_ins_size];

    identifier = new char[identifier_width + 1];

    identifier[identifier_width] = 0;
    time_tag                     = 1.0;

    // --------------------------------------------------------------

    //
    // ASK THE USER.
    //
    // Get the format of the device (text or binary file, socket)
    // to deal with.
    //

    external_base_name = "";
    device_format = 0;

    while ((device_format <= 0) || (device_format > 4))
    {

      cout << "Type of output file to create" << endl << endl;
      cout << "  Binary file : 1" << endl;
      cout << "  Text file   : 2" << endl;
      cout << "  Socket      : 3" << endl;
      cout << "  QUIT!!!     : 4" << endl << endl;
      cout << " Your choice? : ";
      cin >> device_format;
    }

    if (device_format == 4) return 0;

    // Set the writer channel according to its type.

    if (device_format <= 2)
    {
      // File. Get its name.

      cout << "Name of the ASTROLABE header file: ";
      cin >> outfile_name;

      if (device_format <= 2)
      {
        cout << "Base name for the external splitted files: ";
        cin >> external_base_name;
      }

      //
      // No matter the type of file we're dealing with, we must provide with a lineage,
      // which is part of the header included in the ASTROLABE header file.
      // We generate here a "synthetic" noe (including nonsensical values).
      //

      set_synthetic_lineage_data(file_lineage);

    }
    else
    {
      // Sockets.

      cout << "Port to use                      : ";
      cin  >> port;

      server_mode = -1;
      while ((server_mode < 0) | (server_mode > 1))
      {
        cout << "Work as server (0) or client (1) : ";
        cin >> server_mode;
      }

      host = "";
      if (server_mode == 1)
      {
        cout << "Host or IP address to connect to : ";
        cin  >> host;
      }
    }

    // --------------------------------------------------------------

    //
    // SET THE DEVICE CHANNEL according to the data provided by the
    // user.
    //

    switch (device_format)
    {
      case 1:

        // Binary files.

        //
        // We fix the maximum number of epoch per chunk to 100 and the suffix
        // witdh to 9. These values could be any within the legal ranges.
        //

        io_status = writer.set_data_channel(outfile_name.c_str(),
                                            external_base_name.c_str(),
                                            true,  // Binary
                                            100,
                                            9,
                                            &file_lineage);
        break;

      case 2:

        // Text files.

        //
        // We fix the maximum number of epoch per chunk to 100 and the suffix
        // witdh to 9. These values could be any within the legal ranges.
        //

        io_status = writer.set_data_channel(outfile_name.c_str(),
                                            external_base_name.c_str(),
                                            false, // Not binary, that is, text.
                                            100,
                                            9,
                                            &file_lineage);

        break;

      case 3:

        // Sockets.

        io_status = writer.set_data_channel(host.c_str(), port, (server_mode == 0));

        break;
    }

    // Check that the data channel has been correctly set.

    if (io_status != 0)
    {
      cout << "set_observation_channel reported error code " << io_status << endl;
      return 0;
    }


    // --------------------------------------------------------------

    //
    // WRITE DATA to the selected channel, whatever it is.
    //

    // Open the underlying channel.

    io_status = writer.open();
    if (io_status != 0)
    {
      cout << "open() reported error code: " << io_status << endl;
      return 1;
    }


    //
    // Insert 1000 full cycles of the sequence of records provided by
    // our RecordSequence object. Each cycle corresponds to a full epoch.
    //

    total_lines = 1000 * the_record_sequence.cycle_length();

    for (line_index = 0; line_index < total_lines; line_index++)
    {

      //
      // Get the type of record to generate as well as its identifier
      // index.
      //

      the_record_sequence.get_next(record_type, record_id_index, cycle);

      time_tag = (double)cycle;

      //
      // Retrieve the structural information for the kind of record
      // just generated. Then, generate fake data for the proper
      // record type and write it to the output file.
      //

      if (record_type == 1)
      {
        // This is an l-record.

        record_structure_catalogue.l_record_data(record_id_index, sid, n_tags, n_expectations);

        // Identifier.

        identifier = strcpy(identifier, sid.c_str());

        //
        // Decide randomly the shape of the covariance matrix: none, only
        // standard deviations, full matrix (including correlations).
        // Generate fake values at the same time.
        //

        random_value = rand() % 100 + 1;

        if (random_value <= 5)
        {
          n_covariance_values = 0;
        } else if (random_value <= 95)
        {
          n_covariance_values = n_expectations;
          for (i = 0; i < n_covariance_values; i++)
          {
            the_covariance_values[i] = (double)(i + line_index);
          }
        } else
        {
          n_covariance_values = (n_expectations * (n_expectations + 1)) / 2;
          for (i = 0; i < n_covariance_values; i++)
          {
            the_covariance_values[i] = (double)(i + line_index);
          }
          for (i = n_expectations; i < n_covariance_values; i++)
          {
            the_covariance_values[i] = (double)i / 100;
          }
        }

        // Generate fake data for the tags and expectations.

        for (i = 0; i < n_tags;         i++) the_tags[i]         = (double)(i + line_index);
        for (i = 0; i < n_expectations; i++) the_expectations[i] = (double)(i + line_index + 1);

        // Write the l-record.

        io_status = writer.write_l (true, identifier, line_index, time_tag,
                                   n_tags,              the_tags,
                                   n_expectations,      the_expectations,
                                   n_covariance_values, the_covariance_values);
        if (io_status != 0)
        {
          cout << "Error writing l record. Error code in write_l(): " << io_status << endl;
          break;
        }

      }
      else
      {
        // record_type == 0, meaning an o-record.

        record_structure_catalogue.o_record_data(record_id_index, sid,
                                                 n_par_iids, n_obs_iids, n_ins_iids);

        // Identifier.

        identifier = strcpy(identifier, sid.c_str());

        // Generate fake parameter, observation and instrument instance identifiers.

        for (i = 0; i < n_par_iids; i++) the_par_iids[i] = i + line_index;
        for (i = 0; i < n_obs_iids; i++) the_obs_iids[i] = i + line_index + 1;
        for (i = 0; i < n_ins_iids; i++) the_ins_iids[i] = i + line_index + 2;

        // Write the o-record.

        io_status = writer.write_o(true, identifier, time_tag,
                                  n_par_iids, the_par_iids,
                                  n_obs_iids, the_obs_iids,
                                  n_ins_iids, the_ins_iids);
        if (io_status != 0)
        {
          cout << "Error writing o record. Error code in write_o(): " << io_status << endl;
          break;
        }
      }
    }


    // Close the writer.

    io_status =  writer.close();
    if (io_status != 0) cout << "Error closing file. Error code in close(): " << io_status;

    // Cleaning.

    delete identifier;
    delete the_par_iids; 
    delete the_obs_iids;
    delete the_ins_iids;
    delete the_tags;        
    delete the_expectations;
    delete the_covariance_values;

  }

  return 0;
}
\endcode

Now , the header and implementation files for class RecordStructure are reproduced below.

Header file:

\code
#ifndef RECORDSTRUCTURE_HPP
#define RECORDSTRUCTURE_HPP

#include <string>
#include <map>

using namespace std;

/**
 * @brief Class simulating the structural information of
 *        a few observations (l-records) and observation
 *        equations (o-records).
 *
 * This class define the structural properties of a few
 * observations and observation equations.
 *
 * Such structural properties are the following:
 *
 * For observations (l-records),
 *
 * - the value of the identifier,
 * - the number of tag values,
 * - the dimension of the observation array (number of expectation
 *   values). This, indirectly, also sets the dimension of the
 *   covariance matrix related to the observation.
 *
 * For observation equations (o-records),
 *
 * - the value of the identifier,
 * - the number of parameter instance identifiers it needs,
 * - the same for observation instance identifiers and
 * - once more, such number but for instrument identifiers.
 */


class RecordStructure
{
  public:

    /// @brief Default constructor.

    RecordStructure (void);

    /**
     * @brief Return the structure of an observation (l-record) given
     * its identifier.
     *
     * @param id The identifier of the observation whose structural
     *        information is to be sought.
     * @param n_tags Number of tags for this observation.
     * @param n_expectation Number of expectations for this observation.
     *
     * @return True if the identifier id corresponds to an existing
     *         observation, false otherwise.
     *
     * The output values of n_tags and n_expectations only make sense
     * when this method returns true (that is, the identifier sought
     * do exist).
     *
     */

    bool l_record_data (const char* id, int& n_tags, int& n_expectations);

    /**
     * @brief Return the structure of an observation (l-record) given
     * its internal index.
     *
     * @param index The internal index of the observation whose structural
     *        information is to be sought.
     * @param id The identifier related to this observation.
     * @param n_tags Number of tags for this observation.
     * @param n_expectation Number of expectations for this observation.
     *
     * @return True if the identifier id corresponds to an existing
     *         observation, false otherwise.
     *
     * The output values of n_tags and n_expectations only make sense
     * when this method returns true (that is, the index sought
     * do exist).
     *
     * The internal index is just a number between 0 and
     * number_of_l_record_types()-1. These indexes are used to refer to the
     * observations internally.
     *
     */

    bool l_record_data (int index, string& id, int& n_tags, int& n_expectations);

    /**
     * @brief Get the number of different l record types simulated
     *        by this class.
     * @return The number of different l-record types simulated by
     *        this class.
     */

    int  n_l_record_types (void);

    /**
     * @brief Get the number of different o record types simulated
     *        by this class.
     * @return The number of different o-record types simulated by
     *        this class.
     */

    int  n_o_record_types (void);

    /**
     * @brief Return the structure of an observation equation (o-record) given
     * its identifier.
     *
     * @param id The identifier of the observation whose structural
     *        information is to be sought.
     * @param n_par_iids Number of parameter instance identifiers in this
     *        observation equation.
     * @param n_obs_iids Number of observation instance identifiers in this
     *        observation equation.
     * @param n_ins_iids Number of instrument instance identifiers in this
     *        observation equation.
     *
     * @return True if the identifier id corresponds to an existing
     *         observation, false otherwise.
     *
     * The output values of n_par_iids, n_obs_iids and n_ins_iids only
     * make sense when this method returns true (that is, the identifier
     * sought do exist).
     *
     */

    bool o_record_data (const char* id,
                        int& n_par_iids, int& n_obs_iids, int& n_ins_iids);

    /**
     * @brief Return the structure of an observation equation (o-record) given
     * its identifier.
     *
     * @param index The internal index of the observation whose structural
     *        information is to be sought.
     * @param id The identifier related to the observation equation.
     * @param n_par_iids Number of parameter instance identifiers in this
     *        observation equation.
     * @param n_obs_iids Number of observation instance identifiers in this
     *        observation equation.
     * @param n_ins_iids Number of instrument instance identifiers in this
     *        observation equation.
     *
     * @return True if the identifier id corresponds to an existing
     *         observation, false otherwise.
     *
     * The output values of n_par_iids, n_obs_iids and n_ins_iids only
     * make sense when this method returns true (that is, the identifier
     * sought do exist).
     *
     * The internal index is just a number between 0 and
     * number_of_o_record_types()-1. These indexes are used to refer to the
     * observation equations internally.
     *
     */

    bool o_record_data (int index, string& id,
                        int& n_par_iids, int& n_obs_iids, int& n_ins_iids);

  protected:

    /// \brief Observations: number of observations modeled.

    int               l_records_available_;

    /// \brief Observations: identifiers.

    string            l_identifiers_[4];

    /// \brief Observations: number of tags.

    int               l_n_tags_[4];

    ///
    /// \brief Observations: dimension of the observation array, or
    /// number of expectation values.
    ///

    int               l_n_expectations_[4];

    ///
    /// \brief Observations: map to go from an observation identifier
    /// to the index in the arrays that defines it.
    ///

    map<string, int>  lid_to_index;

    /// \brief Observation equations: number of observation equations modeled.

    int               o_records_available_;

    /// \brief Observation equations: identifiers.

    string            o_identifiers_[2];

    /// \brief Observation equations: number of parameter instance ids.

    int               o_n_par_iids_[2];

    /// \brief Observation equations: number of observation instance ids.

    int               o_n_obs_iids_[2];

    /// \brief Observation equations: number of instrument instance ids.

    int               o_n_ins_iids_[2];

    ///
    /// \brief Observation equations: map to go from an observation equation
    /// identifier to the index in the arrays that defines it.
    ///

    map<string, int>  oid_to_index;
};

#endif // RECORDSTRUCTURE_HPP
\endcode

Implementation file:

\code
#include "RecordStructure.hpp"

RecordStructure::
RecordStructure
(void)
{
  {

    l_records_available_ = 4;

    l_identifiers_[0] = "LR01";
    l_identifiers_[1] = "LR02";
    l_identifiers_[2] = "LR03";
    l_identifiers_[3] = "LR04";

    l_n_tags_[0] = 1;
    l_n_tags_[1] = 0;
    l_n_tags_[2] = 2;
    l_n_tags_[3] = 0;

    l_n_expectations_[0] = 2;
    l_n_expectations_[1] = 1;
    l_n_expectations_[2] = 3;
    l_n_expectations_[3] = 2;

    lid_to_index[l_identifiers_[0]] = 0;
    lid_to_index[l_identifiers_[1]] = 1;
    lid_to_index[l_identifiers_[2]] = 2;
    lid_to_index[l_identifiers_[3]] = 3;

    o_records_available_ = 2;

    o_identifiers_[0] = "OR01";
    o_identifiers_[1] = "OR02";

    o_n_par_iids_[0] = 1;
    o_n_par_iids_[1] = 2;

    o_n_obs_iids_[0] = 2;
    o_n_obs_iids_[1] = 1;

    o_n_ins_iids_[0] = 0;
    o_n_ins_iids_[1] = 1;

    oid_to_index[o_identifiers_[0]] = 0;
    oid_to_index[o_identifiers_[1]] = 1;

  }
}

bool
RecordStructure::
l_record_data
(const char* id,
 int&        n_tags,
 int&        n_expectations)
{
  {
    string looking_for(id);
    map<string,int>::iterator finder;
    int index;

    finder = lid_to_index.find(looking_for);
    if (finder == lid_to_index.end()) return false;

    index = finder->second;

    n_tags = l_n_tags_[index];
    n_expectations = l_n_expectations_[index];


    return true;
  }
}

bool
RecordStructure::
l_record_data
(int     index,
 string& id,
 int&    n_tags,
 int&    n_expectations)
{
  {
    if (index < 0) return false;
    if (index >= l_records_available_) return false;

    id = l_identifiers_[index];
    n_tags = l_n_tags_[index];
    n_expectations = l_n_expectations_[index];

    return true;
  }
}

int
RecordStructure::
n_l_record_types
(void)
{
  {
    return l_records_available_;
  }
}

int
RecordStructure::
n_o_record_types
(void)
{
  {
    return o_records_available_;
  }
}

bool
RecordStructure::
o_record_data
(const char* id,
 int& n_par_iids,
 int& n_obs_iids,
 int& n_ins_iids)
{
  {
    string looking_for(id);
    map<string,int>::iterator finder;
    int index;

    finder = oid_to_index.find(looking_for);
    if (finder == oid_to_index.end()) return false;

    index = finder->second;

    n_par_iids = o_n_par_iids_[index];
    n_obs_iids = o_n_obs_iids_[index];
    n_ins_iids = o_n_ins_iids_[index];

    return true;
  }
}

bool
RecordStructure::
o_record_data
(int     index,
 string& id,
 int&    n_par_iids,
 int&    n_obs_iids,
 int&    n_ins_iids)
{
  {
    if (index < 0) return false;
    if (index >= o_records_available_) return false;

    id         = o_identifiers_[index];
    n_par_iids = o_n_par_iids_[index];
    n_obs_iids = o_n_obs_iids_[index];
    n_ins_iids = o_n_ins_iids_[index];

    return true;
  }
}
\endcode

Finally , the header and implementation files for class RecordSequence are included below.

Header file:
\code
#ifndef RECORDSEQUENCE_HPP
#define RECORDSEQUENCE_HPP


class RecordSequence
{
  public:

    /// @brief Return the length of the sequence cycle

    int cycle_length (void);

    /**
     * @brief Get the next item in the sequence.
     * @param record_type The type of the record to generate.
     * @param record_id_index The index of the identifier of the
     *        record to generate.
     * @param cycle Cycle number. Each time that the sequence is
     *        exhausted, this cycle number is increased by one. May
     *        be used to simulate time tags.
     */

    void get_next(int& record_type, int& record_id_index, int& cycle);

    /// \brief Default constructor.

    RecordSequence  (void);

    /// \brief Destructor

    ~RecordSequence (void);

  protected:

    /// Current index of the record sequence.

    int record_sequence_index_;

    /// Current record sequence cycle.

    int record_sequence_cycle_;

    /// Period of the record sequence.

    int record_sequence_length_;

    ///
    /// Record sequence. Identifier indexes of the successive
    /// records in the sequence.
    ///

    int* record_sequence_ids_;

    ///
    /// Record sequence. Types (l = 1, o = 2) of the successive
    /// records in the sequence.
    ///

    int* record_sequence_type_;
};

#endif // RECORDSEQUENCE_HPP
\endcode

Implementation file:

\code
#include "RecordSequence.hpp"

int
RecordSequence::
cycle_length
(void)
{
  {
    return record_sequence_length_;
  }
}

void
RecordSequence::
get_next
(int& record_type, int& record_id_index, int& cycle)
{
  {
    record_type     = record_sequence_type_[record_sequence_index_];
    record_id_index = record_sequence_ids_[record_sequence_index_];
    cycle           = record_sequence_cycle_;

    record_sequence_index_++;

    if (record_sequence_index_ == record_sequence_length_)
    {
      record_sequence_index_ = 0;
      record_sequence_cycle_++;
    }
  }
}

RecordSequence::
RecordSequence
(void)
{
  {
    record_sequence_length_ = 10;
    record_sequence_type_ = new int[record_sequence_length_];
    record_sequence_ids_  = new int[record_sequence_length_];

    record_sequence_type_[0] = 1;
    record_sequence_type_[1] = 1;
    record_sequence_type_[2] = 1;
    record_sequence_type_[3] = 2;
    record_sequence_type_[4] = 1;
    record_sequence_type_[5] = 1;
    record_sequence_type_[6] = 1;
    record_sequence_type_[7] = 1;
    record_sequence_type_[8] = 2;
    record_sequence_type_[9] = 2;

    record_sequence_ids_[0]  = 3;
    record_sequence_ids_[1]  = 2;
    record_sequence_ids_[2]  = 1;
    record_sequence_ids_[3]  = 1;
    record_sequence_ids_[4]  = 0;
    record_sequence_ids_[5]  = 3;
    record_sequence_ids_[6]  = 2;
    record_sequence_ids_[7]  = 1;
    record_sequence_ids_[8]  = 0;
    record_sequence_ids_[9]  = 1;

    record_sequence_index_ = 0;
    record_sequence_cycle_ = 0;
  }
}

RecordSequence::
~RecordSequence
(void)
{
  {
    delete record_sequence_type_;
    delete record_sequence_ids_;
  }
}
\endcode
*/